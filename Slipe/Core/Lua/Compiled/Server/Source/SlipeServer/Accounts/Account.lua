-- Generated by CSharp.lua Compiler
local System = System
local SlipeMtaDefinitions
local SlipeServerAccounts
local SlipeServerPeds
local SlipeSharedElements
System.import(function (out)
  SlipeMtaDefinitions = Slipe.MtaDefinitions
  SlipeServerAccounts = Slipe.Server.Accounts
  SlipeServerPeds = Slipe.Server.Peds
  SlipeSharedElements = Slipe.Shared.Elements
end)
System.namespace("Slipe.Server.Accounts", function (namespace)
  -- <summary>
  -- The account class represents a player's server account.
  -- </summary>
  namespace.class("Account", function (namespace)
    local getIsGuestAccount, getName, getID, getIP, getSerial, getPlayer, getACLIdentifier, getData, 
    getAll, GetAccountsBySerial, GetAccountsByIP, GetAccountsByData, CopyFrom, GetData, SetData, Remove, 
    SetName, SetPassword, HasPermissionTo, IsInACLGroup, Get, GetByID, __ctor1__, __ctor2__
    __ctor1__ = function (this, account)
      this.MTAAccount = account
      SlipeServerAccounts.AccountManager.getInstance():RegisterAccount(this)
    end
    -- <summary>
    -- This function adds an account to the list of registered accounts of the current server.
    -- </summary>
    __ctor2__ = function (this, name, password, caseSensitive)
      __ctor1__(this, SlipeMtaDefinitions.MtaServer.AddAccount(name, password, caseSensitive))
    end
    getIsGuestAccount = function (this)
      return SlipeMtaDefinitions.MtaServer.IsGuestAccount(this.MTAAccount)
    end
    getName = function (this)
      return SlipeMtaDefinitions.MtaServer.GetAccountName(this.MTAAccount)
    end
    getID = function (this)
      return SlipeMtaDefinitions.MtaServer.GetAccountID(this.MTAAccount)
    end
    getIP = function (this)
      return SlipeMtaDefinitions.MtaServer.GetAccountIP(this.MTAAccount)
    end
    getSerial = function (this)
      return SlipeMtaDefinitions.MtaServer.GetAccountSerial(this.MTAAccount)
    end
    getPlayer = function (this)
      local default, extern = System.try(function ()
        return true, System.cast(SlipeServerPeds.Player, SlipeSharedElements.ElementManager.getInstance():GetElement(SlipeMtaDefinitions.MtaServer.GetAccountPlayer(this.MTAAccount)))
      end, function (default)
        if System.is(default, SlipeMtaDefinitions.MtaException) then
          System.throw(SlipeServerAccounts.AccountException("No player can be found using this account"))
        else
          return 1, default
        end
      end)
      if default then
        return extern
      end
    end
    getACLIdentifier = function (this)
      return "user." .. getName(this)
    end
    getData = function (this)
      return SlipeMtaDefinitions.MtaShared.GetDictionaryFromTable(SlipeMtaDefinitions.MtaServer.GetAllAccountData(this.MTAAccount), "System.String", "System.String")
    end
    getAll = function ()
      local array = SlipeMtaDefinitions.MtaShared.GetArrayFromTable(SlipeMtaDefinitions.MtaServer.GetAccounts(), "account", T)
      return SlipeServerAccounts.AccountManager.getInstance():CastMultiple(array)
    end
    -- <summary>
    -- Returns an array of all accounts that were logged onto from a serial
    -- </summary>
    GetAccountsBySerial = function (serial)
      local array = SlipeMtaDefinitions.MtaShared.GetArrayFromTable(SlipeMtaDefinitions.MtaServer.GetAccountsBySerial(serial), "account", T)
      return SlipeServerAccounts.AccountManager.getInstance():CastMultiple(array)
    end
    -- <summary>
    -- Returns an array containing all accounts that were logged onto from specified IP-address.
    -- </summary>
    GetAccountsByIP = function (ip)
      local array = SlipeMtaDefinitions.MtaShared.GetArrayFromTable(SlipeMtaDefinitions.MtaServer.GetAccountsByIP(ip), "account", T)
      return SlipeServerAccounts.AccountManager.getInstance():CastMultiple(array)
    end
    -- <summary>
    -- Returns an array containing all accounts with specified dataName and value (
    -- </summary>
    GetAccountsByData = function (key, value)
      local array = SlipeMtaDefinitions.MtaShared.GetArrayFromTable(SlipeMtaDefinitions.MtaServer.GetAccountsByData(key, value), "account", T)
      return SlipeServerAccounts.AccountManager.getInstance():CastMultiple(array)
    end
    -- <summary>
    -- This function copies all of the data from one account to this account
    -- </summary>
    CopyFrom = function (this, fromAccount)
      return SlipeMtaDefinitions.MtaServer.CopyAccountData(this.MTAAccount, fromAccount.MTAAccount)
    end
    -- <summary>
    -- This function retrieves a string that has been stored using SetData.
    -- </summary>
    GetData = function (this, key)
      return SlipeMtaDefinitions.MtaServer.GetAccountData(this.MTAAccount, key)
    end
    -- <summary>
    -- This function sets a string to be stored in an account.
    -- </summary>
    SetData = function (this, key, value)
      return SlipeMtaDefinitions.MtaServer.SetAccountData(this.MTAAccount, key, value)
    end
    -- <summary>
    -- Removes this account from the server
    -- </summary>
    Remove = function (this)
      return SlipeMtaDefinitions.MtaServer.RemoveAccount(this.MTAAccount)
    end
    -- <summary>
    -- Sets the name of an account
    -- </summary>
    SetName = function (this, name, caseSensitive)
      return SlipeMtaDefinitions.MtaServer.SetAccountName(this.MTAAccount, name, caseSensitive)
    end
    -- <summary>
    -- Used to set the password of this account, encrypted with sha256
    -- </summary>
    SetPassword = function (this, value)
      return SlipeMtaDefinitions.MtaServer.SetAccountPassword(this.MTAAccount, value)
    end
    -- <summary>
    -- Check if the object has access to a given action
    -- </summary>
    HasPermissionTo = function (this, action, defaultPermission)
      return SlipeMtaDefinitions.MtaServer.HasObjectPermissionTo(getACLIdentifier(this), action, defaultPermission)
    end
    -- <summary>
    -- Check if the object is in a certain ACL group
    -- </summary>
    IsInACLGroup = function (this, group)
      return SlipeMtaDefinitions.MtaServer.IsObjectInACLGroup(getACLIdentifier(this), group:getACL())
    end
    -- <summary>
    -- Get an account from some credentials
    -- </summary>
    Get = function (username, password, caseSensitive)
      local default, extern = System.try(function ()
        return true, SlipeServerAccounts.AccountManager.getInstance():GetAccount(SlipeMtaDefinitions.MtaServer.GetAccount(username, password, caseSensitive))
      end, function (default)
        if System.is(default, SlipeMtaDefinitions.MtaException) then
          System.throw(SlipeServerAccounts.AccountException("No account with these credentials could be found"))
        else
          return 1, default
        end
      end)
      if default then
        return extern
      end
    end
    -- <summary>
    -- Get an account from an account ID
    -- </summary>
    GetByID = function (ID)
      local default, extern = System.try(function ()
        return true, SlipeServerAccounts.AccountManager.getInstance():GetAccount(SlipeMtaDefinitions.MtaServer.GetAccountByID(ID))
      end, function (default)
        if System.is(default, SlipeMtaDefinitions.MtaException) then
          System.throw(SlipeServerAccounts.AccountException("No account with this ID found"))
        else
          return 1, default
        end
      end)
      if default then
        return extern
      end
    end
    return {
      __inherits__ = function (out)
        return {
          out.Slipe.Server.Acl.IAclObject
        }
      end,
      getIsGuestAccount = getIsGuestAccount,
      getName = getName,
      getID = getID,
      getIP = getIP,
      getSerial = getSerial,
      getPlayer = getPlayer,
      getACLIdentifier = getACLIdentifier,
      getData = getData,
      getAll = getAll,
      GetAccountsBySerial = GetAccountsBySerial,
      GetAccountsByIP = GetAccountsByIP,
      GetAccountsByData = GetAccountsByData,
      CopyFrom = CopyFrom,
      GetData = GetData,
      SetData = SetData,
      Remove = Remove,
      SetName = SetName,
      SetPassword = SetPassword,
      HasPermissionTo = HasPermissionTo,
      IsInACLGroup = IsInACLGroup,
      Get = Get,
      GetByID = GetByID,
      __ctor__ = {
        __ctor1__,
        __ctor2__
      }
    }
  end)
end)
