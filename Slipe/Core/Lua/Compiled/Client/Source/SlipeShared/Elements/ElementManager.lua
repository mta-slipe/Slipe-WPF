-- Generated by CSharp.lua Compiler
local System = System
local SlipeMtaDefinitions
local SlipeSharedElements
local DictObjectElement
System.import(function (out)
  SlipeMtaDefinitions = Slipe.MtaDefinitions
  SlipeSharedElements = Slipe.Shared.Elements
  DictObjectElement = System.Dictionary(System.Object, SlipeSharedElements.Element)
end)
System.namespace("Slipe.Shared.Elements", function (namespace)
  -- <summary>
  -- Class that manages MTAElement functionality and
  -- </summary>
  namespace.class("ElementManager", function (namespace)
    local instance, getInstance, getRoot, RegisterElement, GetElement, CastArray, GetTypeName, AddEventHandler, 
    HandleEvent, __ctor__
    -- <summary>
    -- Creates the ElementManager given an IElementHelper class that maps MTA elements to classes
    -- </summary>
    __ctor__ = function (this, helper)
      this.elementHelper = helper
      instance = this
      this.elements = DictObjectElement()
      local mtaRoot = SlipeMtaDefinitions.MtaShared.GetRootElement()
      this.root = this.elementHelper:InstantiateElement(SlipeMtaDefinitions.MtaShared.GetElementType(mtaRoot), mtaRoot)
    end
    getInstance = function ()
      if instance == nil then
        System.throw(System.Exception("ElementManager was not defined. Please double check you have a call to `new ElementManager(new ElementHelper());` in your main"))
      end
      return instance
    end
    getRoot = function (this)
      return this.root
    end
    -- <summary>
    -- Registers an element class
    -- </summary>
    RegisterElement = function (this, element)
      this.elements:Add(element:getMTAElement(), element)
    end
    -- <summary>
    -- Gets an element class instance given a certain MTA element
    -- </summary>
    GetElement = function (this, element)
      if element == nil then
        return nil
      end
      if not SlipeMtaDefinitions.MtaShared.IsElement(element) then
        return nil
      end
      if not this.elements:ContainsKey(element) then
        local default, extern = System.try(function ()
          local mtaElementType = SlipeMtaDefinitions.MtaShared.GetElementType(element)
          local wrapperElement = this.elementHelper:InstantiateElement(mtaElementType, element)
          return true, wrapperElement
        end, function (default)
          return true, nil
        end)
        if default then
          return extern
        end
      end
      return this.elements:get(element)
    end
    -- <summary>
    -- Cast an array of MTAElements to a desired type
    -- </summary>
    CastArray = function (this, elements, T)
      local result = System.Array(T):new(#elements)
      for i = 0, #elements - 1 do
        result:set(i, System.cast(T, GetElement(getInstance(), elements:get(i))))
      end
      return result
    end
    -- <summary>
    -- Get the string representation of an element type
    -- </summary>
    -- <returns>A string describing the MTA element type</returns>
    GetTypeName = function (this, type)
      return this.elementHelper:GetTypeName(type)
    end
    AddEventHandler = function (this, element, eventName, propagated, priorty)
      SlipeMtaDefinitions.MtaShared.AddEventHandler(eventName, element:getMTAElement(), "Slipe.Shared.Elements.ElementManager.HandleEvent", propagated, priorty)
    end
    -- <summary>
    -- Handles an event when it's triggered on a specific MTA element
    -- </summary>
    HandleEvent = function (eventString, source, p1, p2, p3, p4, p5, p6, p7, p8)
      SlipeSharedElements.Element.getRoot():HandleEvent(eventString, source, p1, p2, p3, p4, p5, p6, p7, p8)
    end
    return {
      getInstance = getInstance,
      getRoot = getRoot,
      RegisterElement = RegisterElement,
      GetElement = GetElement,
      CastArray = CastArray,
      GetTypeName = GetTypeName,
      AddEventHandler = AddEventHandler,
      HandleEvent = HandleEvent,
      __ctor__ = __ctor__
    }
  end)
end)
